// SynthControl.tsx
import React, {useState, useEffect} from 'react';
import * as Tone from 'tone';
import {useSynthContext} from "./SynthContext";

interface PolySynthControlProps {
    synthTypes: string[];
}

export const PolySynthControl: React.FC<PolySynthControlProps> = ({synthTypes}) => {
    const synthContext = useSynthContext();
    const synthVoices = synthTypes.map((synthType) => synthContext[synthType as keyof typeof synthContext] as
        | Tone.PolySynth)
    const [volume, setVolume] = useState<number>(0);
    const [detune, setDetune] = useState<number>(0);

    useEffect(() => {
        if (synthVoices) {
            synthVoices.forEach(synth => synth?.connect(Tone.Master)) // deprecated; fix eventually.
        }
        return () => {
            synthVoices?.forEach(synth => synth?.dispose());
        };
    }, [synthVoices]);

    const handleNoteOn = (note: string) => {
        synthVoices.forEach(synth => synth?.triggerAttack(note, Tone.now()));
    };

    const handleNoteOff = (note: string) => {
        synthVoices.forEach(synth => synth?.triggerRelease(Tone.now()/*note, Tone.now()*/));
    };

    const handleVolumeChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const newVolume = parseFloat(event.target.value);
        setVolume(newVolume);
        synthVoices.forEach(synth => synth?.set({volume: newVolume}));
    };

    const handleDetuneChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const newDetune = parseFloat(event.target.value);
        setDetune(newDetune);
        synthVoices.forEach(synth => synth?.set({detune: newDetune}));
    };

    return (
        <div className={`synth-control bg-white p-6 rounded-lg shadow-md ${synthTypes}`}>
            <h3 className="text-xl font-bold mb-4">{synthTypes.map(synthType=> (<h4>{synthType}</h4>))}</h3>
            <div className="note-controls mb-4">
                <button
                    onMouseDown={() => handleNoteOn('C4')}
                    onMouseUp={() => handleNoteOff('C4')}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                    C
                </button>
                {/* Add more buttons for other notes */}
            </div>
            <div className="parameter-controls">
                <label className="block">
                    <span className="text-gray-700">Volume</span>
                    <input
                        type="range"
                        min="-60"
                        max="0"
                        step="1"
                        value={volume}
                        onChange={handleVolumeChange}
                        className="mt-1 block w-full"
                    />
                </label>
                <label className="block mt-4">
                    <span className="text-gray-700">Detune</span>
                    <input
                        type="range"
                        min="-1200"
                        max="1200"
                        step="1"
                        value={detune}
                        onChange={handleDetuneChange}
                        className="mt-1 block w-full"
                    />
                </label>
            </div>
        </div>
    );
};
